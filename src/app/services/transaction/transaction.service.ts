//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export default class BaseApiService {
  protected transformOptions(options: any): Promise<any> {
    return Promise.resolve(options);
  }
}

export interface ITransactionApiService {
    /**
     * @return Success
     */
    getCurrencies(): Observable<SwaggerResponse<CurrencyListDto>>;
    /**
     * @return Success
     */
    getTransactionCategories(): Observable<SwaggerResponse<TransactionCategoryListDto>>;
    /**
     * @param transactionId (optional) 
     * @param file_Data_CanRead (optional) 
     * @param file_Data_CanWrite (optional) 
     * @param file_Data_CanSeek (optional) 
     * @param file_Data_CanTimeout (optional) 
     * @param file_Data_Length (optional) 
     * @param file_Data_Position (optional) 
     * @param file_Data_ReadTimeout (optional) 
     * @param file_Data_WriteTimeout (optional) 
     * @param file_FileName (optional) 
     * @param file_ContentType (optional) 
     * @return Success
     */
    addInvoice(transactionId: number | undefined, file_Data_CanRead: boolean | undefined, file_Data_CanWrite: boolean | undefined, file_Data_CanSeek: boolean | undefined, file_Data_CanTimeout: boolean | undefined, file_Data_Length: number | undefined, file_Data_Position: number | undefined, file_Data_ReadTimeout: number | undefined, file_Data_WriteTimeout: number | undefined, file_FileName: string | undefined, file_ContentType: string | undefined): Observable<SwaggerResponse<void>>;
    /**
     * @param id (optional) 
     * @return Success
     */
    deleteInvoice(id: string | undefined): Observable<SwaggerResponse<void>>;
    /**
     * @param id (optional) 
     * @param title (optional) 
     * @param description (optional) 
     * @param recipientName (optional) 
     * @param amount (optional) 
     * @param dateCreated (optional) 
     * @param dateModified (optional) 
     * @param userId (optional) 
     * @param currencyCode (optional) 
     * @param currency_Code (optional) 
     * @param currency_IsDefault (optional) 
     * @param currency_FactorToDefaultCurrency (optional) 
     * @param transactionCategoryId (optional) 
     * @param transactionCategory_Id (optional) 
     * @param transactionCategory_Name (optional) 
     * @param transactionCategory_IsIncome (optional) 
     * @param invoices_Count (optional) 
     * @param invoices_Items (optional) 
     * @return Success
     */
    addTransaction(id: number | undefined, title: string | undefined, description: string | undefined, recipientName: string | undefined, amount: number | undefined, dateCreated: Date | undefined, dateModified: Date | undefined, userId: number | undefined, currencyCode: string | undefined, currency_Code: string | undefined, currency_IsDefault: boolean | undefined, currency_FactorToDefaultCurrency: number | undefined, transactionCategoryId: number | undefined, transactionCategory_Id: number | undefined, transactionCategory_Name: string | undefined, transactionCategory_IsIncome: boolean | undefined, invoices_Count: number | undefined, invoices_Items: InvoiceDto[] | undefined): Observable<SwaggerResponse<void>>;
    /**
     * @param id (optional) 
     * @return Success
     */
    deleteTransaction(id: number | undefined): Observable<SwaggerResponse<void>>;
    /**
     * @param id (optional) 
     * @param title (optional) 
     * @param description (optional) 
     * @param recipientName (optional) 
     * @param amount (optional) 
     * @param dateCreated (optional) 
     * @param dateModified (optional) 
     * @param userId (optional) 
     * @param currencyCode (optional) 
     * @param currency_Code (optional) 
     * @param currency_IsDefault (optional) 
     * @param currency_FactorToDefaultCurrency (optional) 
     * @param transactionCategoryId (optional) 
     * @param transactionCategory_Id (optional) 
     * @param transactionCategory_Name (optional) 
     * @param transactionCategory_IsIncome (optional) 
     * @param invoices_Count (optional) 
     * @param invoices_Items (optional) 
     * @return Success
     */
    modifyTransaction(id: number | undefined, title: string | undefined, description: string | undefined, recipientName: string | undefined, amount: number | undefined, dateCreated: Date | undefined, dateModified: Date | undefined, userId: number | undefined, currencyCode: string | undefined, currency_Code: string | undefined, currency_IsDefault: boolean | undefined, currency_FactorToDefaultCurrency: number | undefined, transactionCategoryId: number | undefined, transactionCategory_Id: number | undefined, transactionCategory_Name: string | undefined, transactionCategory_IsIncome: boolean | undefined, invoices_Count: number | undefined, invoices_Items: InvoiceDto[] | undefined): Observable<SwaggerResponse<void>>;
    /**
     * @return Success
     */
    getTransactionsForUser(userId: number): Observable<SwaggerResponse<TransactionListDto>>;
    /**
     * @param userId (optional) 
     * @param dateFrom (optional) 
     * @param dateTo (optional) 
     * @return Success
     */
    getTransactionsForUserAndBetweenDates(userId: number | undefined, dateFrom: Date | undefined, dateTo: Date | undefined): Observable<SwaggerResponse<TransactionListDto>>;
}

@Injectable({
    providedIn: 'root'
})
export class TransactionApiService extends BaseApiService implements ITransactionApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrencies(): Observable<SwaggerResponse<CurrencyListDto>> {
        let url_ = this.baseUrl + "/Currencies";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetCurrencies(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrencies(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<CurrencyListDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<CurrencyListDto>>;
        }));
    }

    protected processGetCurrencies(response: HttpResponseBase): Observable<SwaggerResponse<CurrencyListDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CurrencyListDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<CurrencyListDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return Success
     */
    getTransactionCategories(): Observable<SwaggerResponse<TransactionCategoryListDto>> {
        let url_ = this.baseUrl + "/TransactionCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetTransactionCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransactionCategories(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<TransactionCategoryListDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<TransactionCategoryListDto>>;
        }));
    }

    protected processGetTransactionCategories(response: HttpResponseBase): Observable<SwaggerResponse<TransactionCategoryListDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionCategoryListDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<TransactionCategoryListDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param transactionId (optional) 
     * @param file_Data_CanRead (optional) 
     * @param file_Data_CanWrite (optional) 
     * @param file_Data_CanSeek (optional) 
     * @param file_Data_CanTimeout (optional) 
     * @param file_Data_Length (optional) 
     * @param file_Data_Position (optional) 
     * @param file_Data_ReadTimeout (optional) 
     * @param file_Data_WriteTimeout (optional) 
     * @param file_FileName (optional) 
     * @param file_ContentType (optional) 
     * @return Success
     */
    addInvoice(transactionId: number | undefined, file_Data_CanRead: boolean | undefined, file_Data_CanWrite: boolean | undefined, file_Data_CanSeek: boolean | undefined, file_Data_CanTimeout: boolean | undefined, file_Data_Length: number | undefined, file_Data_Position: number | undefined, file_Data_ReadTimeout: number | undefined, file_Data_WriteTimeout: number | undefined, file_FileName: string | undefined, file_ContentType: string | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/Invoice?";
        if (transactionId === null)
            throw new Error("The parameter 'transactionId' cannot be null.");
        else if (transactionId !== undefined)
            url_ += "TransactionId=" + encodeURIComponent("" + transactionId) + "&";
        if (file_Data_CanRead === null)
            throw new Error("The parameter 'file_Data_CanRead' cannot be null.");
        else if (file_Data_CanRead !== undefined)
            url_ += "File.Data.CanRead=" + encodeURIComponent("" + file_Data_CanRead) + "&";
        if (file_Data_CanWrite === null)
            throw new Error("The parameter 'file_Data_CanWrite' cannot be null.");
        else if (file_Data_CanWrite !== undefined)
            url_ += "File.Data.CanWrite=" + encodeURIComponent("" + file_Data_CanWrite) + "&";
        if (file_Data_CanSeek === null)
            throw new Error("The parameter 'file_Data_CanSeek' cannot be null.");
        else if (file_Data_CanSeek !== undefined)
            url_ += "File.Data.CanSeek=" + encodeURIComponent("" + file_Data_CanSeek) + "&";
        if (file_Data_CanTimeout === null)
            throw new Error("The parameter 'file_Data_CanTimeout' cannot be null.");
        else if (file_Data_CanTimeout !== undefined)
            url_ += "File.Data.CanTimeout=" + encodeURIComponent("" + file_Data_CanTimeout) + "&";
        if (file_Data_Length === null)
            throw new Error("The parameter 'file_Data_Length' cannot be null.");
        else if (file_Data_Length !== undefined)
            url_ += "File.Data.Length=" + encodeURIComponent("" + file_Data_Length) + "&";
        if (file_Data_Position === null)
            throw new Error("The parameter 'file_Data_Position' cannot be null.");
        else if (file_Data_Position !== undefined)
            url_ += "File.Data.Position=" + encodeURIComponent("" + file_Data_Position) + "&";
        if (file_Data_ReadTimeout === null)
            throw new Error("The parameter 'file_Data_ReadTimeout' cannot be null.");
        else if (file_Data_ReadTimeout !== undefined)
            url_ += "File.Data.ReadTimeout=" + encodeURIComponent("" + file_Data_ReadTimeout) + "&";
        if (file_Data_WriteTimeout === null)
            throw new Error("The parameter 'file_Data_WriteTimeout' cannot be null.");
        else if (file_Data_WriteTimeout !== undefined)
            url_ += "File.Data.WriteTimeout=" + encodeURIComponent("" + file_Data_WriteTimeout) + "&";
        if (file_FileName === null)
            throw new Error("The parameter 'file_FileName' cannot be null.");
        else if (file_FileName !== undefined)
            url_ += "File.FileName=" + encodeURIComponent("" + file_FileName) + "&";
        if (file_ContentType === null)
            throw new Error("The parameter 'file_ContentType' cannot be null.");
        else if (file_ContentType !== undefined)
            url_ += "File.ContentType=" + encodeURIComponent("" + file_ContentType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddInvoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddInvoice(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processAddInvoice(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteInvoice(id: string | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/Invoice?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteInvoice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteInvoice(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processDeleteInvoice(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param id (optional) 
     * @param title (optional) 
     * @param description (optional) 
     * @param recipientName (optional) 
     * @param amount (optional) 
     * @param dateCreated (optional) 
     * @param dateModified (optional) 
     * @param userId (optional) 
     * @param currencyCode (optional) 
     * @param currency_Code (optional) 
     * @param currency_IsDefault (optional) 
     * @param currency_FactorToDefaultCurrency (optional) 
     * @param transactionCategoryId (optional) 
     * @param transactionCategory_Id (optional) 
     * @param transactionCategory_Name (optional) 
     * @param transactionCategory_IsIncome (optional) 
     * @param invoices_Count (optional) 
     * @param invoices_Items (optional) 
     * @return Success
     */
    addTransaction(id: number | undefined, title: string | undefined, description: string | undefined, recipientName: string | undefined, amount: number | undefined, dateCreated: Date | undefined, dateModified: Date | undefined, userId: number | undefined, currencyCode: string | undefined, currency_Code: string | undefined, currency_IsDefault: boolean | undefined, currency_FactorToDefaultCurrency: number | undefined, transactionCategoryId: number | undefined, transactionCategory_Id: number | undefined, transactionCategory_Name: string | undefined, transactionCategory_IsIncome: boolean | undefined, invoices_Count: number | undefined, invoices_Items: InvoiceDto[] | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/Add?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (description === null)
            throw new Error("The parameter 'description' cannot be null.");
        else if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (recipientName === null)
            throw new Error("The parameter 'recipientName' cannot be null.");
        else if (recipientName !== undefined)
            url_ += "RecipientName=" + encodeURIComponent("" + recipientName) + "&";
        if (amount === null)
            throw new Error("The parameter 'amount' cannot be null.");
        else if (amount !== undefined)
            url_ += "Amount=" + encodeURIComponent("" + amount) + "&";
        if (dateCreated === null)
            throw new Error("The parameter 'dateCreated' cannot be null.");
        else if (dateCreated !== undefined)
            url_ += "DateCreated=" + encodeURIComponent(dateCreated ? "" + dateCreated.toISOString() : "") + "&";
        if (dateModified === null)
            throw new Error("The parameter 'dateModified' cannot be null.");
        else if (dateModified !== undefined)
            url_ += "DateModified=" + encodeURIComponent(dateModified ? "" + dateModified.toISOString() : "") + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (currencyCode === null)
            throw new Error("The parameter 'currencyCode' cannot be null.");
        else if (currencyCode !== undefined)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (currency_Code === null)
            throw new Error("The parameter 'currency_Code' cannot be null.");
        else if (currency_Code !== undefined)
            url_ += "Currency.Code=" + encodeURIComponent("" + currency_Code) + "&";
        if (currency_IsDefault === null)
            throw new Error("The parameter 'currency_IsDefault' cannot be null.");
        else if (currency_IsDefault !== undefined)
            url_ += "Currency.IsDefault=" + encodeURIComponent("" + currency_IsDefault) + "&";
        if (currency_FactorToDefaultCurrency === null)
            throw new Error("The parameter 'currency_FactorToDefaultCurrency' cannot be null.");
        else if (currency_FactorToDefaultCurrency !== undefined)
            url_ += "Currency.FactorToDefaultCurrency=" + encodeURIComponent("" + currency_FactorToDefaultCurrency) + "&";
        if (transactionCategoryId === null)
            throw new Error("The parameter 'transactionCategoryId' cannot be null.");
        else if (transactionCategoryId !== undefined)
            url_ += "TransactionCategoryId=" + encodeURIComponent("" + transactionCategoryId) + "&";
        if (transactionCategory_Id === null)
            throw new Error("The parameter 'transactionCategory_Id' cannot be null.");
        else if (transactionCategory_Id !== undefined)
            url_ += "TransactionCategory.Id=" + encodeURIComponent("" + transactionCategory_Id) + "&";
        if (transactionCategory_Name === null)
            throw new Error("The parameter 'transactionCategory_Name' cannot be null.");
        else if (transactionCategory_Name !== undefined)
            url_ += "TransactionCategory.Name=" + encodeURIComponent("" + transactionCategory_Name) + "&";
        if (transactionCategory_IsIncome === null)
            throw new Error("The parameter 'transactionCategory_IsIncome' cannot be null.");
        else if (transactionCategory_IsIncome !== undefined)
            url_ += "TransactionCategory.IsIncome=" + encodeURIComponent("" + transactionCategory_IsIncome) + "&";
        if (invoices_Count === null)
            throw new Error("The parameter 'invoices_Count' cannot be null.");
        else if (invoices_Count !== undefined)
            url_ += "Invoices.Count=" + encodeURIComponent("" + invoices_Count) + "&";
        if (invoices_Items === null)
            throw new Error("The parameter 'invoices_Items' cannot be null.");
        else if (invoices_Items !== undefined)
            invoices_Items && invoices_Items.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Invoices.Items[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processAddTransaction(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddTransaction(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processAddTransaction(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteTransaction(id: number | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processDeleteTransaction(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTransaction(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processDeleteTransaction(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param id (optional) 
     * @param title (optional) 
     * @param description (optional) 
     * @param recipientName (optional) 
     * @param amount (optional) 
     * @param dateCreated (optional) 
     * @param dateModified (optional) 
     * @param userId (optional) 
     * @param currencyCode (optional) 
     * @param currency_Code (optional) 
     * @param currency_IsDefault (optional) 
     * @param currency_FactorToDefaultCurrency (optional) 
     * @param transactionCategoryId (optional) 
     * @param transactionCategory_Id (optional) 
     * @param transactionCategory_Name (optional) 
     * @param transactionCategory_IsIncome (optional) 
     * @param invoices_Count (optional) 
     * @param invoices_Items (optional) 
     * @return Success
     */
    modifyTransaction(id: number | undefined, title: string | undefined, description: string | undefined, recipientName: string | undefined, amount: number | undefined, dateCreated: Date | undefined, dateModified: Date | undefined, userId: number | undefined, currencyCode: string | undefined, currency_Code: string | undefined, currency_IsDefault: boolean | undefined, currency_FactorToDefaultCurrency: number | undefined, transactionCategoryId: number | undefined, transactionCategory_Id: number | undefined, transactionCategory_Name: string | undefined, transactionCategory_IsIncome: boolean | undefined, invoices_Count: number | undefined, invoices_Items: InvoiceDto[] | undefined): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/Modify?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (description === null)
            throw new Error("The parameter 'description' cannot be null.");
        else if (description !== undefined)
            url_ += "Description=" + encodeURIComponent("" + description) + "&";
        if (recipientName === null)
            throw new Error("The parameter 'recipientName' cannot be null.");
        else if (recipientName !== undefined)
            url_ += "RecipientName=" + encodeURIComponent("" + recipientName) + "&";
        if (amount === null)
            throw new Error("The parameter 'amount' cannot be null.");
        else if (amount !== undefined)
            url_ += "Amount=" + encodeURIComponent("" + amount) + "&";
        if (dateCreated === null)
            throw new Error("The parameter 'dateCreated' cannot be null.");
        else if (dateCreated !== undefined)
            url_ += "DateCreated=" + encodeURIComponent(dateCreated ? "" + dateCreated.toISOString() : "") + "&";
        if (dateModified === null)
            throw new Error("The parameter 'dateModified' cannot be null.");
        else if (dateModified !== undefined)
            url_ += "DateModified=" + encodeURIComponent(dateModified ? "" + dateModified.toISOString() : "") + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (currencyCode === null)
            throw new Error("The parameter 'currencyCode' cannot be null.");
        else if (currencyCode !== undefined)
            url_ += "CurrencyCode=" + encodeURIComponent("" + currencyCode) + "&";
        if (currency_Code === null)
            throw new Error("The parameter 'currency_Code' cannot be null.");
        else if (currency_Code !== undefined)
            url_ += "Currency.Code=" + encodeURIComponent("" + currency_Code) + "&";
        if (currency_IsDefault === null)
            throw new Error("The parameter 'currency_IsDefault' cannot be null.");
        else if (currency_IsDefault !== undefined)
            url_ += "Currency.IsDefault=" + encodeURIComponent("" + currency_IsDefault) + "&";
        if (currency_FactorToDefaultCurrency === null)
            throw new Error("The parameter 'currency_FactorToDefaultCurrency' cannot be null.");
        else if (currency_FactorToDefaultCurrency !== undefined)
            url_ += "Currency.FactorToDefaultCurrency=" + encodeURIComponent("" + currency_FactorToDefaultCurrency) + "&";
        if (transactionCategoryId === null)
            throw new Error("The parameter 'transactionCategoryId' cannot be null.");
        else if (transactionCategoryId !== undefined)
            url_ += "TransactionCategoryId=" + encodeURIComponent("" + transactionCategoryId) + "&";
        if (transactionCategory_Id === null)
            throw new Error("The parameter 'transactionCategory_Id' cannot be null.");
        else if (transactionCategory_Id !== undefined)
            url_ += "TransactionCategory.Id=" + encodeURIComponent("" + transactionCategory_Id) + "&";
        if (transactionCategory_Name === null)
            throw new Error("The parameter 'transactionCategory_Name' cannot be null.");
        else if (transactionCategory_Name !== undefined)
            url_ += "TransactionCategory.Name=" + encodeURIComponent("" + transactionCategory_Name) + "&";
        if (transactionCategory_IsIncome === null)
            throw new Error("The parameter 'transactionCategory_IsIncome' cannot be null.");
        else if (transactionCategory_IsIncome !== undefined)
            url_ += "TransactionCategory.IsIncome=" + encodeURIComponent("" + transactionCategory_IsIncome) + "&";
        if (invoices_Count === null)
            throw new Error("The parameter 'invoices_Count' cannot be null.");
        else if (invoices_Count !== undefined)
            url_ += "Invoices.Count=" + encodeURIComponent("" + invoices_Count) + "&";
        if (invoices_Items === null)
            throw new Error("The parameter 'invoices_Items' cannot be null.");
        else if (invoices_Items !== undefined)
            invoices_Items && invoices_Items.forEach((item, index) => {
                for (let attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Invoices.Items[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("patch", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processModifyTransaction(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processModifyTransaction(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<void>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<void>>;
        }));
    }

    protected processModifyTransaction(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @return Success
     */
    getTransactionsForUser(userId: number): Observable<SwaggerResponse<TransactionListDto>> {
        let url_ = this.baseUrl + "/Transactions/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetTransactionsForUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransactionsForUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<TransactionListDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<TransactionListDto>>;
        }));
    }

    protected processGetTransactionsForUser(response: HttpResponseBase): Observable<SwaggerResponse<TransactionListDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionListDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<TransactionListDto>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * @param userId (optional) 
     * @param dateFrom (optional) 
     * @param dateTo (optional) 
     * @return Success
     */
    getTransactionsForUserAndBetweenDates(userId: number | undefined, dateFrom: Date | undefined, dateTo: Date | undefined): Observable<SwaggerResponse<TransactionListDto>> {
        let url_ = this.baseUrl + "/Transactions?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetTransactionsForUserAndBetweenDates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTransactionsForUserAndBetweenDates(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SwaggerResponse<TransactionListDto>>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SwaggerResponse<TransactionListDto>>;
        }));
    }

    protected processGetTransactionsForUserAndBetweenDates(response: HttpResponseBase): Observable<SwaggerResponse<TransactionListDto>> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionListDto.fromJS(resultData200);
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<TransactionListDto>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class CurrencyDto implements ICurrencyDto {
    code?: string | undefined;
    isDefault?: boolean;
    factorToDefaultCurrency?: number;

    constructor(data?: ICurrencyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.isDefault = _data["isDefault"];
            this.factorToDefaultCurrency = _data["factorToDefaultCurrency"];
        }
    }

    static fromJS(data: any): CurrencyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["isDefault"] = this.isDefault;
        data["factorToDefaultCurrency"] = this.factorToDefaultCurrency;
        return data;
    }
}

export interface ICurrencyDto {
    code?: string | undefined;
    isDefault?: boolean;
    factorToDefaultCurrency?: number;
}

export class CurrencyListDto implements ICurrencyListDto {
    count?: number;
    items?: CurrencyDto[] | undefined;

    constructor(data?: ICurrencyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CurrencyDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurrencyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICurrencyListDto {
    count?: number;
    items?: CurrencyDto[] | undefined;
}

export class FileMetadataDto implements IFileMetadataDto {
    name?: string | undefined;
    extension?: string | undefined;
    mimetype?: string | undefined;
    size?: number;
    visible?: boolean;
    uploadDate?: Date;

    constructor(data?: IFileMetadataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.mimetype = _data["mimetype"];
            this.size = _data["size"];
            this.visible = _data["visible"];
            this.uploadDate = _data["uploadDate"] ? new Date(_data["uploadDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FileMetadataDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileMetadataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["mimetype"] = this.mimetype;
        data["size"] = this.size;
        data["visible"] = this.visible;
        data["uploadDate"] = this.uploadDate ? this.uploadDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFileMetadataDto {
    name?: string | undefined;
    extension?: string | undefined;
    mimetype?: string | undefined;
    size?: number;
    visible?: boolean;
    uploadDate?: Date;
}

export class InvoiceDto implements IInvoiceDto {
    fileId?: string;
    fileMetadata?: FileMetadataDto;

    constructor(data?: IInvoiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileId = _data["fileId"];
            this.fileMetadata = _data["fileMetadata"] ? FileMetadataDto.fromJS(_data["fileMetadata"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InvoiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileId"] = this.fileId;
        data["fileMetadata"] = this.fileMetadata ? this.fileMetadata.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInvoiceDto {
    fileId?: string;
    fileMetadata?: FileMetadataDto;
}

export class InvoiceListDto implements IInvoiceListDto {
    count?: number;
    items?: InvoiceDto[] | undefined;

    constructor(data?: IInvoiceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(InvoiceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InvoiceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInvoiceListDto {
    count?: number;
    items?: InvoiceDto[] | undefined;
}

export class TransactionCategoryDto implements ITransactionCategoryDto {
    id?: number;
    name?: string | undefined;
    isIncome?: boolean;

    constructor(data?: ITransactionCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isIncome = _data["isIncome"];
        }
    }

    static fromJS(data: any): TransactionCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isIncome"] = this.isIncome;
        return data;
    }
}

export interface ITransactionCategoryDto {
    id?: number;
    name?: string | undefined;
    isIncome?: boolean;
}

export class TransactionCategoryListDto implements ITransactionCategoryListDto {
    count?: number;
    items?: TransactionCategoryDto[] | undefined;

    constructor(data?: ITransactionCategoryListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TransactionCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransactionCategoryListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionCategoryListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITransactionCategoryListDto {
    count?: number;
    items?: TransactionCategoryDto[] | undefined;
}

export class TransactionDto implements ITransactionDto {
    id?: number;
    title?: string | undefined;
    description?: string | undefined;
    recipientName?: string | undefined;
    amount?: number;
    dateCreated?: Date;
    dateModified?: Date;
    userId?: number;
    currencyCode?: string | undefined;
    currency?: CurrencyDto;
    transactionCategoryId?: number;
    transactionCategory?: TransactionCategoryDto;
    invoices?: InvoiceListDto;

    constructor(data?: ITransactionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.recipientName = _data["recipientName"];
            this.amount = _data["amount"];
            this.dateCreated = _data["dateCreated"] ? new Date(_data["dateCreated"].toString()) : <any>undefined;
            this.dateModified = _data["dateModified"] ? new Date(_data["dateModified"].toString()) : <any>undefined;
            this.userId = _data["userId"];
            this.currencyCode = _data["currencyCode"];
            this.currency = _data["currency"] ? CurrencyDto.fromJS(_data["currency"]) : <any>undefined;
            this.transactionCategoryId = _data["transactionCategoryId"];
            this.transactionCategory = _data["transactionCategory"] ? TransactionCategoryDto.fromJS(_data["transactionCategory"]) : <any>undefined;
            this.invoices = _data["invoices"] ? InvoiceListDto.fromJS(_data["invoices"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TransactionDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["recipientName"] = this.recipientName;
        data["amount"] = this.amount;
        data["dateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
        data["dateModified"] = this.dateModified ? this.dateModified.toISOString() : <any>undefined;
        data["userId"] = this.userId;
        data["currencyCode"] = this.currencyCode;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["transactionCategoryId"] = this.transactionCategoryId;
        data["transactionCategory"] = this.transactionCategory ? this.transactionCategory.toJSON() : <any>undefined;
        data["invoices"] = this.invoices ? this.invoices.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITransactionDto {
    id?: number;
    title?: string | undefined;
    description?: string | undefined;
    recipientName?: string | undefined;
    amount?: number;
    dateCreated?: Date;
    dateModified?: Date;
    userId?: number;
    currencyCode?: string | undefined;
    currency?: CurrencyDto;
    transactionCategoryId?: number;
    transactionCategory?: TransactionCategoryDto;
    invoices?: InvoiceListDto;
}

export class TransactionListDto implements ITransactionListDto {
    count?: number;
    items?: TransactionDto[] | undefined;

    constructor(data?: ITransactionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.count = _data["count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TransactionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransactionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITransactionListDto {
    count?: number;
    items?: TransactionDto[] | undefined;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;

    constructor(status: number, headers: { [key: string]: any; }, result: TResult)
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}